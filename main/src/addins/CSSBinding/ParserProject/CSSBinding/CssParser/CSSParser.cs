//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.3.1.7705
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.3.1.7705 CSS.g3 2013-07-28 13:09:45

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162


using System.Collections.Generic;
using Antlr.Runtime;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace CssParser
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.3.1.7705")]
[System.CLSCompliant(false)]
public partial class CSSParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "A", "ANGLE", "B", "C", "CDC", "CDO", "CHARSET_SYM", "COLON", "COMMA", "COMMENT", "D", "DASHMATCH", "DIMENSION", "DOT", "E", "EMS", "ESCAPE", "EXS", "F", "FREQ", "G", "GREATER", "H", "HASH", "HEXCHAR", "I", "IDENT", "IMPORTANT_SYM", "IMPORT_SYM", "INCLUDES", "INVALID", "J", "K", "L", "LBRACE", "LBRACKET", "LENGTH", "LPAREN", "M", "MEDIA_SYM", "MINUS", "N", "NAME", "NL", "NMCHAR", "NMSTART", "NONASCII", "NUMBER", "O", "OPEQ", "P", "PAGE_SYM", "PERCENTAGE", "PLUS", "Q", "R", "RBRACE", "RBRACKET", "RPAREN", "S", "SEMI", "SOLIDUS", "STAR", "STRING", "T", "TIME", "U", "UNICODE", "URI", "URL", "V", "W", "WS", "X", "Y", "Z"
	};
	public const int EOF=-1;
	public const int A=4;
	public const int ANGLE=5;
	public const int B=6;
	public const int C=7;
	public const int CDC=8;
	public const int CDO=9;
	public const int CHARSET_SYM=10;
	public const int COLON=11;
	public const int COMMA=12;
	public const int COMMENT=13;
	public const int D=14;
	public const int DASHMATCH=15;
	public const int DIMENSION=16;
	public const int DOT=17;
	public const int E=18;
	public const int EMS=19;
	public const int ESCAPE=20;
	public const int EXS=21;
	public const int F=22;
	public const int FREQ=23;
	public const int G=24;
	public const int GREATER=25;
	public const int H=26;
	public const int HASH=27;
	public const int HEXCHAR=28;
	public const int I=29;
	public const int IDENT=30;
	public const int IMPORTANT_SYM=31;
	public const int IMPORT_SYM=32;
	public const int INCLUDES=33;
	public const int INVALID=34;
	public const int J=35;
	public const int K=36;
	public const int L=37;
	public const int LBRACE=38;
	public const int LBRACKET=39;
	public const int LENGTH=40;
	public const int LPAREN=41;
	public const int M=42;
	public const int MEDIA_SYM=43;
	public const int MINUS=44;
	public const int N=45;
	public const int NAME=46;
	public const int NL=47;
	public const int NMCHAR=48;
	public const int NMSTART=49;
	public const int NONASCII=50;
	public const int NUMBER=51;
	public const int O=52;
	public const int OPEQ=53;
	public const int P=54;
	public const int PAGE_SYM=55;
	public const int PERCENTAGE=56;
	public const int PLUS=57;
	public const int Q=58;
	public const int R=59;
	public const int RBRACE=60;
	public const int RBRACKET=61;
	public const int RPAREN=62;
	public const int S=63;
	public const int SEMI=64;
	public const int SOLIDUS=65;
	public const int STAR=66;
	public const int STRING=67;
	public const int T=68;
	public const int TIME=69;
	public const int U=70;
	public const int UNICODE=71;
	public const int URI=72;
	public const int URL=73;
	public const int V=74;
	public const int W=75;
	public const int WS=76;
	public const int X=77;
	public const int Y=78;
	public const int Z=79;

	// delegates
	// delegators

	public CSSParser( ITokenStream input )
		: this( input, new RecognizerSharedState() )
	{
	}
	public CSSParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);

		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();


		OnCreated();
	}
		
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return CSSParser.tokenNames; } }
	public override string GrammarFileName { get { return "CSS.g3"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	public sealed partial class styleSheet_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public styleSheet_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_styleSheet();
	partial void LeaveRule_styleSheet();

	// $ANTLR start "styleSheet"
	// CSS.g3:13:8: public styleSheet : charSet ( imports )* bodylist EOF ;
	[GrammarRule("styleSheet")]
	public CSSParser.styleSheet_return styleSheet()
	{
		EnterRule_styleSheet();
		EnterRule("styleSheet", 1);
		TraceIn("styleSheet", 1);
		CSSParser.styleSheet_return retval = new CSSParser.styleSheet_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken EOF4 = default(CommonToken);
		CSSParser.charSet_return charSet1 = default(CSSParser.charSet_return);
		CSSParser.imports_return imports2 = default(CSSParser.imports_return);
		CSSParser.bodylist_return bodylist3 = default(CSSParser.bodylist_return);

		CommonTree EOF4_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "styleSheet");
		DebugLocation(13, 4);
		try
		{
			// CSS.g3:14:5: ( charSet ( imports )* bodylist EOF )
			DebugEnterAlt(1);
			// CSS.g3:14:9: charSet ( imports )* bodylist EOF
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(14, 9);
			PushFollow(Follow._charSet_in_styleSheet76);
			charSet1=charSet();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, charSet1.Tree);
			DebugLocation(15, 9);
			// CSS.g3:15:9: ( imports )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==IMPORT_SYM))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// CSS.g3:15:9: imports
					{
					DebugLocation(15, 9);
					PushFollow(Follow._imports_in_styleSheet86);
					imports2=imports();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, imports2.Tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(16, 9);
			PushFollow(Follow._bodylist_in_styleSheet97);
			bodylist3=bodylist();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, bodylist3.Tree);
			DebugLocation(17, 6);
			EOF4=(CommonToken)Match(input,EOF,Follow._EOF_in_styleSheet104); if (state.failed) return retval;
			if (state.backtracking == 0) {
			EOF4_tree = (CommonTree)adaptor.Create(EOF4);
			adaptor.AddChild(root_0, EOF4_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("styleSheet", 1);
			LeaveRule("styleSheet", 1);
			LeaveRule_styleSheet();
		}
		DebugLocation(18, 4);
		} finally { DebugExitRule(GrammarFileName, "styleSheet"); }
		return retval;

	}
	// $ANTLR end "styleSheet"

	private sealed partial class charSet_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public charSet_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_charSet();
	partial void LeaveRule_charSet();

	// $ANTLR start "charSet"
	// CSS.g3:23:1: charSet : ( CHARSET_SYM STRING SEMI |);
	[GrammarRule("charSet")]
	private CSSParser.charSet_return charSet()
	{
		EnterRule_charSet();
		EnterRule("charSet", 2);
		TraceIn("charSet", 2);
		CSSParser.charSet_return retval = new CSSParser.charSet_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken CHARSET_SYM5 = default(CommonToken);
		CommonToken STRING6 = default(CommonToken);
		CommonToken SEMI7 = default(CommonToken);

		CommonTree CHARSET_SYM5_tree = default(CommonTree);
		CommonTree STRING6_tree = default(CommonTree);
		CommonTree SEMI7_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "charSet");
		DebugLocation(23, 4);
		try
		{
			// CSS.g3:24:5: ( CHARSET_SYM STRING SEMI |)
			int alt2=2;
			try { DebugEnterDecision(2, false);
			int LA2_0 = input.LA(1);

			if ((LA2_0==CHARSET_SYM))
			{
				alt2 = 1;
			}
			else if ((LA2_0==EOF||LA2_0==COLON||LA2_0==DOT||LA2_0==HASH||LA2_0==IDENT||LA2_0==IMPORT_SYM||LA2_0==LBRACKET||LA2_0==MEDIA_SYM||LA2_0==PAGE_SYM||LA2_0==STAR))
			{
				alt2 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// CSS.g3:24:9: CHARSET_SYM STRING SEMI
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(24, 9);
				CHARSET_SYM5=(CommonToken)Match(input,CHARSET_SYM,Follow._CHARSET_SYM_in_charSet130); if (state.failed) return retval;
				if (state.backtracking == 0) {
				CHARSET_SYM5_tree = (CommonTree)adaptor.Create(CHARSET_SYM5);
				adaptor.AddChild(root_0, CHARSET_SYM5_tree);
				}
				DebugLocation(24, 21);
				STRING6=(CommonToken)Match(input,STRING,Follow._STRING_in_charSet132); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING6_tree = (CommonTree)adaptor.Create(STRING6);
				adaptor.AddChild(root_0, STRING6_tree);
				}
				DebugLocation(24, 28);
				SEMI7=(CommonToken)Match(input,SEMI,Follow._SEMI_in_charSet134); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SEMI7_tree = (CommonTree)adaptor.Create(SEMI7);
				adaptor.AddChild(root_0, SEMI7_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CSS.g3:26:5: 
				{
				root_0 = (CommonTree)adaptor.Nil();

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("charSet", 2);
			LeaveRule("charSet", 2);
			LeaveRule_charSet();
		}
		DebugLocation(26, 4);
		} finally { DebugExitRule(GrammarFileName, "charSet"); }
		return retval;

	}
	// $ANTLR end "charSet"

	private sealed partial class imports_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public imports_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_imports();
	partial void LeaveRule_imports();

	// $ANTLR start "imports"
	// CSS.g3:31:1: imports : IMPORT_SYM ( STRING | URI ) ( medium ( COMMA medium )* )? SEMI ;
	[GrammarRule("imports")]
	private CSSParser.imports_return imports()
	{
		EnterRule_imports();
		EnterRule("imports", 3);
		TraceIn("imports", 3);
		CSSParser.imports_return retval = new CSSParser.imports_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken IMPORT_SYM8 = default(CommonToken);
		CommonToken set9 = default(CommonToken);
		CommonToken COMMA11 = default(CommonToken);
		CommonToken SEMI13 = default(CommonToken);
		CSSParser.medium_return medium10 = default(CSSParser.medium_return);
		CSSParser.medium_return medium12 = default(CSSParser.medium_return);

		CommonTree IMPORT_SYM8_tree = default(CommonTree);
		CommonTree set9_tree = default(CommonTree);
		CommonTree COMMA11_tree = default(CommonTree);
		CommonTree SEMI13_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "imports");
		DebugLocation(31, 4);
		try
		{
			// CSS.g3:32:5: ( IMPORT_SYM ( STRING | URI ) ( medium ( COMMA medium )* )? SEMI )
			DebugEnterAlt(1);
			// CSS.g3:32:9: IMPORT_SYM ( STRING | URI ) ( medium ( COMMA medium )* )? SEMI
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(32, 9);
			IMPORT_SYM8=(CommonToken)Match(input,IMPORT_SYM,Follow._IMPORT_SYM_in_imports162); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IMPORT_SYM8_tree = (CommonTree)adaptor.Create(IMPORT_SYM8);
			adaptor.AddChild(root_0, IMPORT_SYM8_tree);
			}
			DebugLocation(32, 20);
			set9=(CommonToken)input.LT(1);
			if (input.LA(1)==STRING||input.LA(1)==URI)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set9));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}

			DebugLocation(32, 33);
			// CSS.g3:32:33: ( medium ( COMMA medium )* )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_0 = input.LA(1);

			if ((LA4_0==IDENT))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// CSS.g3:32:34: medium ( COMMA medium )*
				{
				DebugLocation(32, 34);
				PushFollow(Follow._medium_in_imports171);
				medium10=medium();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, medium10.Tree);
				DebugLocation(32, 41);
				// CSS.g3:32:41: ( COMMA medium )*
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_0 = input.LA(1);

					if ((LA3_0==COMMA))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch ( alt3 )
					{
					case 1:
						DebugEnterAlt(1);
						// CSS.g3:32:42: COMMA medium
						{
						DebugLocation(32, 42);
						COMMA11=(CommonToken)Match(input,COMMA,Follow._COMMA_in_imports174); if (state.failed) return retval;
						if (state.backtracking == 0) {
						COMMA11_tree = (CommonTree)adaptor.Create(COMMA11);
						adaptor.AddChild(root_0, COMMA11_tree);
						}
						DebugLocation(32, 48);
						PushFollow(Follow._medium_in_imports176);
						medium12=medium();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, medium12.Tree);

						}
						break;

					default:
						goto loop3;
					}
				}

				loop3:
					;

				} finally { DebugExitSubRule(3); }


				}
				break;

			}
			} finally { DebugExitSubRule(4); }

			DebugLocation(32, 59);
			SEMI13=(CommonToken)Match(input,SEMI,Follow._SEMI_in_imports182); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SEMI13_tree = (CommonTree)adaptor.Create(SEMI13);
			adaptor.AddChild(root_0, SEMI13_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("imports", 3);
			LeaveRule("imports", 3);
			LeaveRule_imports();
		}
		DebugLocation(33, 4);
		} finally { DebugExitRule(GrammarFileName, "imports"); }
		return retval;

	}
	// $ANTLR end "imports"

	private sealed partial class media_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public media_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_media();
	partial void LeaveRule_media();

	// $ANTLR start "media"
	// CSS.g3:39:1: media : MEDIA_SYM medium ( COMMA medium )* LBRACE ruleSet RBRACE ;
	[GrammarRule("media")]
	private CSSParser.media_return media()
	{
		EnterRule_media();
		EnterRule("media", 4);
		TraceIn("media", 4);
		CSSParser.media_return retval = new CSSParser.media_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken MEDIA_SYM14 = default(CommonToken);
		CommonToken COMMA16 = default(CommonToken);
		CommonToken LBRACE18 = default(CommonToken);
		CommonToken RBRACE20 = default(CommonToken);
		CSSParser.medium_return medium15 = default(CSSParser.medium_return);
		CSSParser.medium_return medium17 = default(CSSParser.medium_return);
		CSSParser.ruleSet_return ruleSet19 = default(CSSParser.ruleSet_return);

		CommonTree MEDIA_SYM14_tree = default(CommonTree);
		CommonTree COMMA16_tree = default(CommonTree);
		CommonTree LBRACE18_tree = default(CommonTree);
		CommonTree RBRACE20_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "media");
		DebugLocation(39, 4);
		try
		{
			// CSS.g3:40:5: ( MEDIA_SYM medium ( COMMA medium )* LBRACE ruleSet RBRACE )
			DebugEnterAlt(1);
			// CSS.g3:40:7: MEDIA_SYM medium ( COMMA medium )* LBRACE ruleSet RBRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(40, 7);
			MEDIA_SYM14=(CommonToken)Match(input,MEDIA_SYM,Follow._MEDIA_SYM_in_media203); if (state.failed) return retval;
			if (state.backtracking == 0) {
			MEDIA_SYM14_tree = (CommonTree)adaptor.Create(MEDIA_SYM14);
			adaptor.AddChild(root_0, MEDIA_SYM14_tree);
			}
			DebugLocation(40, 17);
			PushFollow(Follow._medium_in_media205);
			medium15=medium();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, medium15.Tree);
			DebugLocation(40, 24);
			// CSS.g3:40:24: ( COMMA medium )*
			try { DebugEnterSubRule(5);
			while (true)
			{
				int alt5=2;
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if ((LA5_0==COMMA))
				{
					alt5 = 1;
				}


				} finally { DebugExitDecision(5); }
				switch ( alt5 )
				{
				case 1:
					DebugEnterAlt(1);
					// CSS.g3:40:25: COMMA medium
					{
					DebugLocation(40, 25);
					COMMA16=(CommonToken)Match(input,COMMA,Follow._COMMA_in_media208); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA16_tree = (CommonTree)adaptor.Create(COMMA16);
					adaptor.AddChild(root_0, COMMA16_tree);
					}
					DebugLocation(40, 31);
					PushFollow(Follow._medium_in_media210);
					medium17=medium();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, medium17.Tree);

					}
					break;

				default:
					goto loop5;
				}
			}

			loop5:
				;

			} finally { DebugExitSubRule(5); }

			DebugLocation(41, 9);
			LBRACE18=(CommonToken)Match(input,LBRACE,Follow._LBRACE_in_media222); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LBRACE18_tree = (CommonTree)adaptor.Create(LBRACE18);
			adaptor.AddChild(root_0, LBRACE18_tree);
			}
			DebugLocation(42, 13);
			PushFollow(Follow._ruleSet_in_media236);
			ruleSet19=ruleSet();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ruleSet19.Tree);
			DebugLocation(43, 9);
			RBRACE20=(CommonToken)Match(input,RBRACE,Follow._RBRACE_in_media246); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RBRACE20_tree = (CommonTree)adaptor.Create(RBRACE20);
			adaptor.AddChild(root_0, RBRACE20_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("media", 4);
			LeaveRule("media", 4);
			LeaveRule_media();
		}
		DebugLocation(44, 4);
		} finally { DebugExitRule(GrammarFileName, "media"); }
		return retval;

	}
	// $ANTLR end "media"

	private sealed partial class medium_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public medium_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_medium();
	partial void LeaveRule_medium();

	// $ANTLR start "medium"
	// CSS.g3:49:1: medium : IDENT ;
	[GrammarRule("medium")]
	private CSSParser.medium_return medium()
	{
		EnterRule_medium();
		EnterRule("medium", 5);
		TraceIn("medium", 5);
		CSSParser.medium_return retval = new CSSParser.medium_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENT21 = default(CommonToken);

		CommonTree IDENT21_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "medium");
		DebugLocation(49, 4);
		try
		{
			// CSS.g3:50:5: ( IDENT )
			DebugEnterAlt(1);
			// CSS.g3:50:7: IDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(50, 7);
			IDENT21=(CommonToken)Match(input,IDENT,Follow._IDENT_in_medium266); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT21_tree = (CommonTree)adaptor.Create(IDENT21);
			adaptor.AddChild(root_0, IDENT21_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("medium", 5);
			LeaveRule("medium", 5);
			LeaveRule_medium();
		}
		DebugLocation(51, 4);
		} finally { DebugExitRule(GrammarFileName, "medium"); }
		return retval;

	}
	// $ANTLR end "medium"

	private sealed partial class bodylist_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public bodylist_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_bodylist();
	partial void LeaveRule_bodylist();

	// $ANTLR start "bodylist"
	// CSS.g3:54:1: bodylist : ( bodyset )* ;
	[GrammarRule("bodylist")]
	private CSSParser.bodylist_return bodylist()
	{
		EnterRule_bodylist();
		EnterRule("bodylist", 6);
		TraceIn("bodylist", 6);
		CSSParser.bodylist_return retval = new CSSParser.bodylist_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CSSParser.bodyset_return bodyset22 = default(CSSParser.bodyset_return);


		try { DebugEnterRule(GrammarFileName, "bodylist");
		DebugLocation(54, 4);
		try
		{
			// CSS.g3:55:5: ( ( bodyset )* )
			DebugEnterAlt(1);
			// CSS.g3:55:7: ( bodyset )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(55, 7);
			// CSS.g3:55:7: ( bodyset )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_0 = input.LA(1);

				if ((LA6_0==COLON||LA6_0==DOT||LA6_0==HASH||LA6_0==IDENT||LA6_0==LBRACKET||LA6_0==MEDIA_SYM||LA6_0==PAGE_SYM||LA6_0==STAR))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// CSS.g3:55:7: bodyset
					{
					DebugLocation(55, 7);
					PushFollow(Follow._bodyset_in_bodylist289);
					bodyset22=bodyset();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, bodyset22.Tree);

					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bodylist", 6);
			LeaveRule("bodylist", 6);
			LeaveRule_bodylist();
		}
		DebugLocation(56, 4);
		} finally { DebugExitRule(GrammarFileName, "bodylist"); }
		return retval;

	}
	// $ANTLR end "bodylist"

	private sealed partial class bodyset_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public bodyset_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_bodyset();
	partial void LeaveRule_bodyset();

	// $ANTLR start "bodyset"
	// CSS.g3:58:1: bodyset : ( ruleSet | media | page );
	[GrammarRule("bodyset")]
	private CSSParser.bodyset_return bodyset()
	{
		EnterRule_bodyset();
		EnterRule("bodyset", 7);
		TraceIn("bodyset", 7);
		CSSParser.bodyset_return retval = new CSSParser.bodyset_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CSSParser.ruleSet_return ruleSet23 = default(CSSParser.ruleSet_return);
		CSSParser.media_return media24 = default(CSSParser.media_return);
		CSSParser.page_return page25 = default(CSSParser.page_return);


		try { DebugEnterRule(GrammarFileName, "bodyset");
		DebugLocation(58, 4);
		try
		{
			// CSS.g3:59:5: ( ruleSet | media | page )
			int alt7=3;
			try { DebugEnterDecision(7, false);
			switch (input.LA(1))
			{
			case COLON:
			case DOT:
			case HASH:
			case IDENT:
			case LBRACKET:
			case STAR:
				{
				alt7 = 1;
				}
				break;
			case MEDIA_SYM:
				{
				alt7 = 2;
				}
				break;
			case PAGE_SYM:
				{
				alt7 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 7, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// CSS.g3:59:7: ruleSet
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(59, 7);
				PushFollow(Follow._ruleSet_in_bodyset311);
				ruleSet23=ruleSet();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ruleSet23.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CSS.g3:60:7: media
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(60, 7);
				PushFollow(Follow._media_in_bodyset319);
				media24=media();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, media24.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// CSS.g3:61:7: page
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(61, 7);
				PushFollow(Follow._page_in_bodyset327);
				page25=page();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, page25.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bodyset", 7);
			LeaveRule("bodyset", 7);
			LeaveRule_bodyset();
		}
		DebugLocation(62, 4);
		} finally { DebugExitRule(GrammarFileName, "bodyset"); }
		return retval;

	}
	// $ANTLR end "bodyset"

	private sealed partial class page_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public page_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_page();
	partial void LeaveRule_page();

	// $ANTLR start "page"
	// CSS.g3:64:1: page : PAGE_SYM ( pseudoPage )? LBRACE declaration SEMI ( declaration SEMI )* RBRACE ;
	[GrammarRule("page")]
	private CSSParser.page_return page()
	{
		EnterRule_page();
		EnterRule("page", 8);
		TraceIn("page", 8);
		CSSParser.page_return retval = new CSSParser.page_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PAGE_SYM26 = default(CommonToken);
		CommonToken LBRACE28 = default(CommonToken);
		CommonToken SEMI30 = default(CommonToken);
		CommonToken SEMI32 = default(CommonToken);
		CommonToken RBRACE33 = default(CommonToken);
		CSSParser.pseudoPage_return pseudoPage27 = default(CSSParser.pseudoPage_return);
		CSSParser.declaration_return declaration29 = default(CSSParser.declaration_return);
		CSSParser.declaration_return declaration31 = default(CSSParser.declaration_return);

		CommonTree PAGE_SYM26_tree = default(CommonTree);
		CommonTree LBRACE28_tree = default(CommonTree);
		CommonTree SEMI30_tree = default(CommonTree);
		CommonTree SEMI32_tree = default(CommonTree);
		CommonTree RBRACE33_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "page");
		DebugLocation(64, 4);
		try
		{
			// CSS.g3:65:5: ( PAGE_SYM ( pseudoPage )? LBRACE declaration SEMI ( declaration SEMI )* RBRACE )
			DebugEnterAlt(1);
			// CSS.g3:65:7: PAGE_SYM ( pseudoPage )? LBRACE declaration SEMI ( declaration SEMI )* RBRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(65, 7);
			PAGE_SYM26=(CommonToken)Match(input,PAGE_SYM,Follow._PAGE_SYM_in_page351); if (state.failed) return retval;
			if (state.backtracking == 0) {
			PAGE_SYM26_tree = (CommonTree)adaptor.Create(PAGE_SYM26);
			adaptor.AddChild(root_0, PAGE_SYM26_tree);
			}
			DebugLocation(65, 16);
			// CSS.g3:65:16: ( pseudoPage )?
			int alt8=2;
			try { DebugEnterSubRule(8);
			try { DebugEnterDecision(8, false);
			int LA8_0 = input.LA(1);

			if ((LA8_0==COLON))
			{
				alt8 = 1;
			}
			} finally { DebugExitDecision(8); }
			switch (alt8)
			{
			case 1:
				DebugEnterAlt(1);
				// CSS.g3:65:16: pseudoPage
				{
				DebugLocation(65, 16);
				PushFollow(Follow._pseudoPage_in_page353);
				pseudoPage27=pseudoPage();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pseudoPage27.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(8); }

			DebugLocation(66, 9);
			LBRACE28=(CommonToken)Match(input,LBRACE,Follow._LBRACE_in_page364); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LBRACE28_tree = (CommonTree)adaptor.Create(LBRACE28);
			adaptor.AddChild(root_0, LBRACE28_tree);
			}
			DebugLocation(67, 13);
			PushFollow(Follow._declaration_in_page378);
			declaration29=declaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declaration29.Tree);
			DebugLocation(67, 25);
			SEMI30=(CommonToken)Match(input,SEMI,Follow._SEMI_in_page380); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SEMI30_tree = (CommonTree)adaptor.Create(SEMI30);
			adaptor.AddChild(root_0, SEMI30_tree);
			}
			DebugLocation(67, 30);
			// CSS.g3:67:30: ( declaration SEMI )*
			try { DebugEnterSubRule(9);
			while (true)
			{
				int alt9=2;
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==IDENT))
				{
					alt9 = 1;
				}


				} finally { DebugExitDecision(9); }
				switch ( alt9 )
				{
				case 1:
					DebugEnterAlt(1);
					// CSS.g3:67:31: declaration SEMI
					{
					DebugLocation(67, 31);
					PushFollow(Follow._declaration_in_page383);
					declaration31=declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declaration31.Tree);
					DebugLocation(67, 43);
					SEMI32=(CommonToken)Match(input,SEMI,Follow._SEMI_in_page385); if (state.failed) return retval;
					if (state.backtracking == 0) {
					SEMI32_tree = (CommonTree)adaptor.Create(SEMI32);
					adaptor.AddChild(root_0, SEMI32_tree);
					}

					}
					break;

				default:
					goto loop9;
				}
			}

			loop9:
				;

			} finally { DebugExitSubRule(9); }

			DebugLocation(68, 9);
			RBRACE33=(CommonToken)Match(input,RBRACE,Follow._RBRACE_in_page397); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RBRACE33_tree = (CommonTree)adaptor.Create(RBRACE33);
			adaptor.AddChild(root_0, RBRACE33_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("page", 8);
			LeaveRule("page", 8);
			LeaveRule_page();
		}
		DebugLocation(69, 4);
		} finally { DebugExitRule(GrammarFileName, "page"); }
		return retval;

	}
	// $ANTLR end "page"

	private sealed partial class pseudoPage_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public pseudoPage_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_pseudoPage();
	partial void LeaveRule_pseudoPage();

	// $ANTLR start "pseudoPage"
	// CSS.g3:71:1: pseudoPage : COLON IDENT ;
	[GrammarRule("pseudoPage")]
	private CSSParser.pseudoPage_return pseudoPage()
	{
		EnterRule_pseudoPage();
		EnterRule("pseudoPage", 9);
		TraceIn("pseudoPage", 9);
		CSSParser.pseudoPage_return retval = new CSSParser.pseudoPage_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COLON34 = default(CommonToken);
		CommonToken IDENT35 = default(CommonToken);

		CommonTree COLON34_tree = default(CommonTree);
		CommonTree IDENT35_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "pseudoPage");
		DebugLocation(71, 4);
		try
		{
			// CSS.g3:72:5: ( COLON IDENT )
			DebugEnterAlt(1);
			// CSS.g3:72:7: COLON IDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(72, 7);
			COLON34=(CommonToken)Match(input,COLON,Follow._COLON_in_pseudoPage418); if (state.failed) return retval;
			if (state.backtracking == 0) {
			COLON34_tree = (CommonTree)adaptor.Create(COLON34);
			adaptor.AddChild(root_0, COLON34_tree);
			}
			DebugLocation(72, 13);
			IDENT35=(CommonToken)Match(input,IDENT,Follow._IDENT_in_pseudoPage420); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT35_tree = (CommonTree)adaptor.Create(IDENT35);
			adaptor.AddChild(root_0, IDENT35_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pseudoPage", 9);
			LeaveRule("pseudoPage", 9);
			LeaveRule_pseudoPage();
		}
		DebugLocation(73, 4);
		} finally { DebugExitRule(GrammarFileName, "pseudoPage"); }
		return retval;

	}
	// $ANTLR end "pseudoPage"

	private sealed partial class operator_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public operator_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_operator();
	partial void LeaveRule_operator();

	// $ANTLR start "operator"
	// CSS.g3:75:1: operator : ( SOLIDUS | COMMA |);
	[GrammarRule("operator")]
	private CSSParser.operator_return @operator()
	{
		EnterRule_operator();
		EnterRule("operator", 10);
		TraceIn("operator", 10);
		CSSParser.operator_return retval = new CSSParser.operator_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken SOLIDUS36 = default(CommonToken);
		CommonToken COMMA37 = default(CommonToken);

		CommonTree SOLIDUS36_tree = default(CommonTree);
		CommonTree COMMA37_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "operator");
		DebugLocation(75, 4);
		try
		{
			// CSS.g3:76:5: ( SOLIDUS | COMMA |)
			int alt10=3;
			try { DebugEnterDecision(10, false);
			switch (input.LA(1))
			{
			case SOLIDUS:
				{
				alt10 = 1;
				}
				break;
			case COMMA:
				{
				alt10 = 2;
				}
				break;
			case ANGLE:
			case EMS:
			case EXS:
			case FREQ:
			case HASH:
			case IDENT:
			case LENGTH:
			case MINUS:
			case NUMBER:
			case PERCENTAGE:
			case PLUS:
			case STRING:
			case TIME:
			case URI:
				{
				alt10 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// CSS.g3:76:7: SOLIDUS
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(76, 7);
				SOLIDUS36=(CommonToken)Match(input,SOLIDUS,Follow._SOLIDUS_in_operator441); if (state.failed) return retval;
				if (state.backtracking == 0) {
				SOLIDUS36_tree = (CommonTree)adaptor.Create(SOLIDUS36);
				adaptor.AddChild(root_0, SOLIDUS36_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CSS.g3:77:7: COMMA
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(77, 7);
				COMMA37=(CommonToken)Match(input,COMMA,Follow._COMMA_in_operator449); if (state.failed) return retval;
				if (state.backtracking == 0) {
				COMMA37_tree = (CommonTree)adaptor.Create(COMMA37);
				adaptor.AddChild(root_0, COMMA37_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// CSS.g3:79:5: 
				{
				root_0 = (CommonTree)adaptor.Nil();

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("operator", 10);
			LeaveRule("operator", 10);
			LeaveRule_operator();
		}
		DebugLocation(79, 4);
		} finally { DebugExitRule(GrammarFileName, "operator"); }
		return retval;

	}
	// $ANTLR end "operator"

	private sealed partial class combinator_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public combinator_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_combinator();
	partial void LeaveRule_combinator();

	// $ANTLR start "combinator"
	// CSS.g3:81:1: combinator : ( PLUS | GREATER |);
	[GrammarRule("combinator")]
	private CSSParser.combinator_return combinator()
	{
		EnterRule_combinator();
		EnterRule("combinator", 11);
		TraceIn("combinator", 11);
		CSSParser.combinator_return retval = new CSSParser.combinator_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken PLUS38 = default(CommonToken);
		CommonToken GREATER39 = default(CommonToken);

		CommonTree PLUS38_tree = default(CommonTree);
		CommonTree GREATER39_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "combinator");
		DebugLocation(81, 4);
		try
		{
			// CSS.g3:82:5: ( PLUS | GREATER |)
			int alt11=3;
			try { DebugEnterDecision(11, false);
			switch (input.LA(1))
			{
			case PLUS:
				{
				alt11 = 1;
				}
				break;
			case GREATER:
				{
				alt11 = 2;
				}
				break;
			case COLON:
			case DOT:
			case HASH:
			case IDENT:
			case LBRACKET:
			case STAR:
				{
				alt11 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 11, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(11); }
			switch (alt11)
			{
			case 1:
				DebugEnterAlt(1);
				// CSS.g3:82:7: PLUS
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(82, 7);
				PLUS38=(CommonToken)Match(input,PLUS,Follow._PLUS_in_combinator476); if (state.failed) return retval;
				if (state.backtracking == 0) {
				PLUS38_tree = (CommonTree)adaptor.Create(PLUS38);
				adaptor.AddChild(root_0, PLUS38_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CSS.g3:83:7: GREATER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(83, 7);
				GREATER39=(CommonToken)Match(input,GREATER,Follow._GREATER_in_combinator484); if (state.failed) return retval;
				if (state.backtracking == 0) {
				GREATER39_tree = (CommonTree)adaptor.Create(GREATER39);
				adaptor.AddChild(root_0, GREATER39_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// CSS.g3:85:5: 
				{
				root_0 = (CommonTree)adaptor.Nil();

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("combinator", 11);
			LeaveRule("combinator", 11);
			LeaveRule_combinator();
		}
		DebugLocation(85, 4);
		} finally { DebugExitRule(GrammarFileName, "combinator"); }
		return retval;

	}
	// $ANTLR end "combinator"

	private sealed partial class unaryOperator_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public unaryOperator_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_unaryOperator();
	partial void LeaveRule_unaryOperator();

	// $ANTLR start "unaryOperator"
	// CSS.g3:87:1: unaryOperator : ( MINUS | PLUS );
	[GrammarRule("unaryOperator")]
	private CSSParser.unaryOperator_return unaryOperator()
	{
		EnterRule_unaryOperator();
		EnterRule("unaryOperator", 12);
		TraceIn("unaryOperator", 12);
		CSSParser.unaryOperator_return retval = new CSSParser.unaryOperator_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set40 = default(CommonToken);

		CommonTree set40_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "unaryOperator");
		DebugLocation(87, 4);
		try
		{
			// CSS.g3:88:5: ( MINUS | PLUS )
			DebugEnterAlt(1);
			// CSS.g3:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(88, 5);
			set40=(CommonToken)input.LT(1);
			if (input.LA(1)==MINUS||input.LA(1)==PLUS)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set40));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("unaryOperator", 12);
			LeaveRule("unaryOperator", 12);
			LeaveRule_unaryOperator();
		}
		DebugLocation(90, 4);
		} finally { DebugExitRule(GrammarFileName, "unaryOperator"); }
		return retval;

	}
	// $ANTLR end "unaryOperator"

	private sealed partial class property_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public property_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_property();
	partial void LeaveRule_property();

	// $ANTLR start "property"
	// CSS.g3:92:1: property : IDENT ;
	[GrammarRule("property")]
	private CSSParser.property_return property()
	{
		EnterRule_property();
		EnterRule("property", 13);
		TraceIn("property", 13);
		CSSParser.property_return retval = new CSSParser.property_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken IDENT41 = default(CommonToken);

		CommonTree IDENT41_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "property");
		DebugLocation(92, 4);
		try
		{
			// CSS.g3:93:5: ( IDENT )
			DebugEnterAlt(1);
			// CSS.g3:93:7: IDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(93, 7);
			IDENT41=(CommonToken)Match(input,IDENT,Follow._IDENT_in_property542); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT41_tree = (CommonTree)adaptor.Create(IDENT41);
			adaptor.AddChild(root_0, IDENT41_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("property", 13);
			LeaveRule("property", 13);
			LeaveRule_property();
		}
		DebugLocation(94, 4);
		} finally { DebugExitRule(GrammarFileName, "property"); }
		return retval;

	}
	// $ANTLR end "property"

	private sealed partial class ruleSet_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public ruleSet_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_ruleSet();
	partial void LeaveRule_ruleSet();

	// $ANTLR start "ruleSet"
	// CSS.g3:96:1: ruleSet : selector ( COMMA selector )* LBRACE declaration SEMI ( declaration SEMI )* RBRACE ;
	[GrammarRule("ruleSet")]
	private CSSParser.ruleSet_return ruleSet()
	{
		EnterRule_ruleSet();
		EnterRule("ruleSet", 14);
		TraceIn("ruleSet", 14);
		CSSParser.ruleSet_return retval = new CSSParser.ruleSet_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COMMA43 = default(CommonToken);
		CommonToken LBRACE45 = default(CommonToken);
		CommonToken SEMI47 = default(CommonToken);
		CommonToken SEMI49 = default(CommonToken);
		CommonToken RBRACE50 = default(CommonToken);
		CSSParser.selector_return selector42 = default(CSSParser.selector_return);
		CSSParser.selector_return selector44 = default(CSSParser.selector_return);
		CSSParser.declaration_return declaration46 = default(CSSParser.declaration_return);
		CSSParser.declaration_return declaration48 = default(CSSParser.declaration_return);

		CommonTree COMMA43_tree = default(CommonTree);
		CommonTree LBRACE45_tree = default(CommonTree);
		CommonTree SEMI47_tree = default(CommonTree);
		CommonTree SEMI49_tree = default(CommonTree);
		CommonTree RBRACE50_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "ruleSet");
		DebugLocation(96, 4);
		try
		{
			// CSS.g3:97:5: ( selector ( COMMA selector )* LBRACE declaration SEMI ( declaration SEMI )* RBRACE )
			DebugEnterAlt(1);
			// CSS.g3:97:7: selector ( COMMA selector )* LBRACE declaration SEMI ( declaration SEMI )* RBRACE
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(97, 7);
			PushFollow(Follow._selector_in_ruleSet563);
			selector42=selector();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, selector42.Tree);
			DebugLocation(97, 16);
			// CSS.g3:97:16: ( COMMA selector )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==COMMA))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// CSS.g3:97:17: COMMA selector
					{
					DebugLocation(97, 17);
					COMMA43=(CommonToken)Match(input,COMMA,Follow._COMMA_in_ruleSet566); if (state.failed) return retval;
					if (state.backtracking == 0) {
					COMMA43_tree = (CommonTree)adaptor.Create(COMMA43);
					adaptor.AddChild(root_0, COMMA43_tree);
					}
					DebugLocation(97, 23);
					PushFollow(Follow._selector_in_ruleSet568);
					selector44=selector();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, selector44.Tree);

					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(98, 9);
			LBRACE45=(CommonToken)Match(input,LBRACE,Follow._LBRACE_in_ruleSet580); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LBRACE45_tree = (CommonTree)adaptor.Create(LBRACE45);
			adaptor.AddChild(root_0, LBRACE45_tree);
			}
			DebugLocation(99, 13);
			PushFollow(Follow._declaration_in_ruleSet594);
			declaration46=declaration();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, declaration46.Tree);
			DebugLocation(99, 25);
			SEMI47=(CommonToken)Match(input,SEMI,Follow._SEMI_in_ruleSet596); if (state.failed) return retval;
			if (state.backtracking == 0) {
			SEMI47_tree = (CommonTree)adaptor.Create(SEMI47);
			adaptor.AddChild(root_0, SEMI47_tree);
			}
			DebugLocation(99, 30);
			// CSS.g3:99:30: ( declaration SEMI )*
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==IDENT))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch ( alt13 )
				{
				case 1:
					DebugEnterAlt(1);
					// CSS.g3:99:31: declaration SEMI
					{
					DebugLocation(99, 31);
					PushFollow(Follow._declaration_in_ruleSet599);
					declaration48=declaration();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, declaration48.Tree);
					DebugLocation(99, 43);
					SEMI49=(CommonToken)Match(input,SEMI,Follow._SEMI_in_ruleSet601); if (state.failed) return retval;
					if (state.backtracking == 0) {
					SEMI49_tree = (CommonTree)adaptor.Create(SEMI49);
					adaptor.AddChild(root_0, SEMI49_tree);
					}

					}
					break;

				default:
					goto loop13;
				}
			}

			loop13:
				;

			} finally { DebugExitSubRule(13); }

			DebugLocation(100, 9);
			RBRACE50=(CommonToken)Match(input,RBRACE,Follow._RBRACE_in_ruleSet613); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RBRACE50_tree = (CommonTree)adaptor.Create(RBRACE50);
			adaptor.AddChild(root_0, RBRACE50_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ruleSet", 14);
			LeaveRule("ruleSet", 14);
			LeaveRule_ruleSet();
		}
		DebugLocation(101, 4);
		} finally { DebugExitRule(GrammarFileName, "ruleSet"); }
		return retval;

	}
	// $ANTLR end "ruleSet"

	private sealed partial class selector_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public selector_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_selector();
	partial void LeaveRule_selector();

	// $ANTLR start "selector"
	// CSS.g3:103:1: selector : simpleSelector ( combinator simpleSelector )* ;
	[GrammarRule("selector")]
	private CSSParser.selector_return selector()
	{
		EnterRule_selector();
		EnterRule("selector", 15);
		TraceIn("selector", 15);
		CSSParser.selector_return retval = new CSSParser.selector_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CSSParser.simpleSelector_return simpleSelector51 = default(CSSParser.simpleSelector_return);
		CSSParser.combinator_return combinator52 = default(CSSParser.combinator_return);
		CSSParser.simpleSelector_return simpleSelector53 = default(CSSParser.simpleSelector_return);


		try { DebugEnterRule(GrammarFileName, "selector");
		DebugLocation(103, 4);
		try
		{
			// CSS.g3:104:5: ( simpleSelector ( combinator simpleSelector )* )
			DebugEnterAlt(1);
			// CSS.g3:104:7: simpleSelector ( combinator simpleSelector )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(104, 7);
			PushFollow(Follow._simpleSelector_in_selector634);
			simpleSelector51=simpleSelector();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, simpleSelector51.Tree);
			DebugLocation(104, 22);
			// CSS.g3:104:22: ( combinator simpleSelector )*
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				int LA14_0 = input.LA(1);

				if ((LA14_0==COLON||LA14_0==DOT||LA14_0==GREATER||LA14_0==HASH||LA14_0==IDENT||LA14_0==LBRACKET||LA14_0==PLUS||LA14_0==STAR))
				{
					alt14 = 1;
				}


				} finally { DebugExitDecision(14); }
				switch ( alt14 )
				{
				case 1:
					DebugEnterAlt(1);
					// CSS.g3:104:23: combinator simpleSelector
					{
					DebugLocation(104, 23);
					PushFollow(Follow._combinator_in_selector637);
					combinator52=combinator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, combinator52.Tree);
					DebugLocation(104, 34);
					PushFollow(Follow._simpleSelector_in_selector639);
					simpleSelector53=simpleSelector();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, simpleSelector53.Tree);

					}
					break;

				default:
					goto loop14;
				}
			}

			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector", 15);
			LeaveRule("selector", 15);
			LeaveRule_selector();
		}
		DebugLocation(105, 4);
		} finally { DebugExitRule(GrammarFileName, "selector"); }
		return retval;

	}
	// $ANTLR end "selector"

	private sealed partial class simpleSelector_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public simpleSelector_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_simpleSelector();
	partial void LeaveRule_simpleSelector();

	// $ANTLR start "simpleSelector"
	// CSS.g3:107:1: simpleSelector : ( elementName ( ( esPred )=> elementSubsequent )* | ( ( esPred )=> elementSubsequent )+ );
	[GrammarRule("simpleSelector")]
	private CSSParser.simpleSelector_return simpleSelector()
	{
		EnterRule_simpleSelector();
		EnterRule("simpleSelector", 16);
		TraceIn("simpleSelector", 16);
		CSSParser.simpleSelector_return retval = new CSSParser.simpleSelector_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CSSParser.elementName_return elementName54 = default(CSSParser.elementName_return);
		CSSParser.elementSubsequent_return elementSubsequent55 = default(CSSParser.elementSubsequent_return);
		CSSParser.elementSubsequent_return elementSubsequent56 = default(CSSParser.elementSubsequent_return);


		try { DebugEnterRule(GrammarFileName, "simpleSelector");
		DebugLocation(107, 4);
		try
		{
			// CSS.g3:108:5: ( elementName ( ( esPred )=> elementSubsequent )* | ( ( esPred )=> elementSubsequent )+ )
			int alt17=2;
			try { DebugEnterDecision(17, false);
			int LA17_0 = input.LA(1);

			if ((LA17_0==IDENT||LA17_0==STAR))
			{
				alt17 = 1;
			}
			else if ((LA17_0==COLON||LA17_0==DOT||LA17_0==HASH||LA17_0==LBRACKET))
			{
				alt17 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(17); }
			switch (alt17)
			{
			case 1:
				DebugEnterAlt(1);
				// CSS.g3:108:7: elementName ( ( esPred )=> elementSubsequent )*
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(108, 7);
				PushFollow(Follow._elementName_in_simpleSelector658);
				elementName54=elementName();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, elementName54.Tree);
				DebugLocation(109, 9);
				// CSS.g3:109:9: ( ( esPred )=> elementSubsequent )*
				try { DebugEnterSubRule(15);
				while (true)
				{
					int alt15=2;
					try { DebugEnterDecision(15, false);
					try
					{
						alt15 = dfa15.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(15); }
					switch ( alt15 )
					{
					case 1:
						DebugEnterAlt(1);
						// CSS.g3:109:10: ( esPred )=> elementSubsequent
						{
						DebugLocation(109, 20);
						PushFollow(Follow._elementSubsequent_in_simpleSelector674);
						elementSubsequent55=elementSubsequent();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, elementSubsequent55.Tree);

						}
						break;

					default:
						goto loop15;
					}
				}

				loop15:
					;

				} finally { DebugExitSubRule(15); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CSS.g3:111:7: ( ( esPred )=> elementSubsequent )+
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(111, 7);
				// CSS.g3:111:7: ( ( esPred )=> elementSubsequent )+
				int cnt16=0;
				try { DebugEnterSubRule(16);
				while (true)
				{
					int alt16=2;
					try { DebugEnterDecision(16, false);
					switch (input.LA(1))
					{
					case HASH:
						{
						int LA16_2 = input.LA(2);

						if ((EvaluatePredicate(synpred2_CSS_fragment)))
						{
							alt16 = 1;
						}


						}
						break;
					case DOT:
						{
						int LA16_3 = input.LA(2);

						if ((EvaluatePredicate(synpred2_CSS_fragment)))
						{
							alt16 = 1;
						}


						}
						break;
					case LBRACKET:
						{
						int LA16_4 = input.LA(2);

						if ((EvaluatePredicate(synpred2_CSS_fragment)))
						{
							alt16 = 1;
						}


						}
						break;
					case COLON:
						{
						int LA16_5 = input.LA(2);

						if ((EvaluatePredicate(synpred2_CSS_fragment)))
						{
							alt16 = 1;
						}


						}
						break;

					}

					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// CSS.g3:111:8: ( esPred )=> elementSubsequent
						{
						DebugLocation(111, 18);
						PushFollow(Follow._elementSubsequent_in_simpleSelector698);
						elementSubsequent56=elementSubsequent();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) adaptor.AddChild(root_0, elementSubsequent56.Tree);

						}
						break;

					default:
						if (cnt16 >= 1)
							goto loop16;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee16 = new EarlyExitException( 16, input );
						DebugRecognitionException(eee16);
						throw eee16;
					}
					cnt16++;
				}
				loop16:
					;

				} finally { DebugExitSubRule(16); }


				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("simpleSelector", 16);
			LeaveRule("simpleSelector", 16);
			LeaveRule_simpleSelector();
		}
		DebugLocation(112, 4);
		} finally { DebugExitRule(GrammarFileName, "simpleSelector"); }
		return retval;

	}
	// $ANTLR end "simpleSelector"

	private sealed partial class esPred_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public esPred_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_esPred();
	partial void LeaveRule_esPred();

	// $ANTLR start "esPred"
	// CSS.g3:114:1: esPred : ( HASH | DOT | LBRACKET | COLON );
	[GrammarRule("esPred")]
	private CSSParser.esPred_return esPred()
	{
		EnterRule_esPred();
		EnterRule("esPred", 17);
		TraceIn("esPred", 17);
		CSSParser.esPred_return retval = new CSSParser.esPred_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set57 = default(CommonToken);

		CommonTree set57_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "esPred");
		DebugLocation(114, 4);
		try
		{
			// CSS.g3:115:5: ( HASH | DOT | LBRACKET | COLON )
			DebugEnterAlt(1);
			// CSS.g3:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(115, 5);
			set57=(CommonToken)input.LT(1);
			if (input.LA(1)==COLON||input.LA(1)==DOT||input.LA(1)==HASH||input.LA(1)==LBRACKET)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set57));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("esPred", 17);
			LeaveRule("esPred", 17);
			LeaveRule_esPred();
		}
		DebugLocation(116, 4);
		} finally { DebugExitRule(GrammarFileName, "esPred"); }
		return retval;

	}
	// $ANTLR end "esPred"

	private sealed partial class elementSubsequent_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public elementSubsequent_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_elementSubsequent();
	partial void LeaveRule_elementSubsequent();

	// $ANTLR start "elementSubsequent"
	// CSS.g3:118:1: elementSubsequent : ( HASH | cssClass | attrib | pseudo );
	[GrammarRule("elementSubsequent")]
	private CSSParser.elementSubsequent_return elementSubsequent()
	{
		EnterRule_elementSubsequent();
		EnterRule("elementSubsequent", 18);
		TraceIn("elementSubsequent", 18);
		CSSParser.elementSubsequent_return retval = new CSSParser.elementSubsequent_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken HASH58 = default(CommonToken);
		CSSParser.cssClass_return cssClass59 = default(CSSParser.cssClass_return);
		CSSParser.attrib_return attrib60 = default(CSSParser.attrib_return);
		CSSParser.pseudo_return pseudo61 = default(CSSParser.pseudo_return);

		CommonTree HASH58_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "elementSubsequent");
		DebugLocation(118, 4);
		try
		{
			// CSS.g3:119:5: ( HASH | cssClass | attrib | pseudo )
			int alt18=4;
			try { DebugEnterDecision(18, false);
			switch (input.LA(1))
			{
			case HASH:
				{
				alt18 = 1;
				}
				break;
			case DOT:
				{
				alt18 = 2;
				}
				break;
			case LBRACKET:
				{
				alt18 = 3;
				}
				break;
			case COLON:
				{
				alt18 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// CSS.g3:119:7: HASH
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(119, 7);
				HASH58=(CommonToken)Match(input,HASH,Follow._HASH_in_elementSubsequent754); if (state.failed) return retval;
				if (state.backtracking == 0) {
				HASH58_tree = (CommonTree)adaptor.Create(HASH58);
				adaptor.AddChild(root_0, HASH58_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CSS.g3:120:7: cssClass
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(120, 7);
				PushFollow(Follow._cssClass_in_elementSubsequent762);
				cssClass59=cssClass();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cssClass59.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// CSS.g3:121:7: attrib
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(121, 7);
				PushFollow(Follow._attrib_in_elementSubsequent770);
				attrib60=attrib();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, attrib60.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// CSS.g3:122:7: pseudo
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(122, 7);
				PushFollow(Follow._pseudo_in_elementSubsequent778);
				pseudo61=pseudo();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, pseudo61.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elementSubsequent", 18);
			LeaveRule("elementSubsequent", 18);
			LeaveRule_elementSubsequent();
		}
		DebugLocation(123, 4);
		} finally { DebugExitRule(GrammarFileName, "elementSubsequent"); }
		return retval;

	}
	// $ANTLR end "elementSubsequent"

	private sealed partial class cssClass_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public cssClass_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_cssClass();
	partial void LeaveRule_cssClass();

	// $ANTLR start "cssClass"
	// CSS.g3:125:1: cssClass : DOT IDENT ;
	[GrammarRule("cssClass")]
	private CSSParser.cssClass_return cssClass()
	{
		EnterRule_cssClass();
		EnterRule("cssClass", 19);
		TraceIn("cssClass", 19);
		CSSParser.cssClass_return retval = new CSSParser.cssClass_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken DOT62 = default(CommonToken);
		CommonToken IDENT63 = default(CommonToken);

		CommonTree DOT62_tree = default(CommonTree);
		CommonTree IDENT63_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "cssClass");
		DebugLocation(125, 4);
		try
		{
			// CSS.g3:126:5: ( DOT IDENT )
			DebugEnterAlt(1);
			// CSS.g3:126:7: DOT IDENT
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(126, 7);
			DOT62=(CommonToken)Match(input,DOT,Follow._DOT_in_cssClass799); if (state.failed) return retval;
			if (state.backtracking == 0) {
			DOT62_tree = (CommonTree)adaptor.Create(DOT62);
			adaptor.AddChild(root_0, DOT62_tree);
			}
			DebugLocation(126, 11);
			IDENT63=(CommonToken)Match(input,IDENT,Follow._IDENT_in_cssClass801); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT63_tree = (CommonTree)adaptor.Create(IDENT63);
			adaptor.AddChild(root_0, IDENT63_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cssClass", 19);
			LeaveRule("cssClass", 19);
			LeaveRule_cssClass();
		}
		DebugLocation(127, 4);
		} finally { DebugExitRule(GrammarFileName, "cssClass"); }
		return retval;

	}
	// $ANTLR end "cssClass"

	private sealed partial class elementName_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public elementName_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_elementName();
	partial void LeaveRule_elementName();

	// $ANTLR start "elementName"
	// CSS.g3:129:1: elementName : ( IDENT | STAR );
	[GrammarRule("elementName")]
	private CSSParser.elementName_return elementName()
	{
		EnterRule_elementName();
		EnterRule("elementName", 20);
		TraceIn("elementName", 20);
		CSSParser.elementName_return retval = new CSSParser.elementName_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set64 = default(CommonToken);

		CommonTree set64_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "elementName");
		DebugLocation(129, 4);
		try
		{
			// CSS.g3:130:5: ( IDENT | STAR )
			DebugEnterAlt(1);
			// CSS.g3:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(130, 5);
			set64=(CommonToken)input.LT(1);
			if (input.LA(1)==IDENT||input.LA(1)==STAR)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set64));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("elementName", 20);
			LeaveRule("elementName", 20);
			LeaveRule_elementName();
		}
		DebugLocation(132, 4);
		} finally { DebugExitRule(GrammarFileName, "elementName"); }
		return retval;

	}
	// $ANTLR end "elementName"

	private sealed partial class attrib_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public attrib_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_attrib();
	partial void LeaveRule_attrib();

	// $ANTLR start "attrib"
	// CSS.g3:134:1: attrib : LBRACKET IDENT ( ( OPEQ | INCLUDES | DASHMATCH ) ( IDENT | STRING ) )? RBRACKET ;
	[GrammarRule("attrib")]
	private CSSParser.attrib_return attrib()
	{
		EnterRule_attrib();
		EnterRule("attrib", 21);
		TraceIn("attrib", 21);
		CSSParser.attrib_return retval = new CSSParser.attrib_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken LBRACKET65 = default(CommonToken);
		CommonToken IDENT66 = default(CommonToken);
		CommonToken set67 = default(CommonToken);
		CommonToken set68 = default(CommonToken);
		CommonToken RBRACKET69 = default(CommonToken);

		CommonTree LBRACKET65_tree = default(CommonTree);
		CommonTree IDENT66_tree = default(CommonTree);
		CommonTree set67_tree = default(CommonTree);
		CommonTree set68_tree = default(CommonTree);
		CommonTree RBRACKET69_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "attrib");
		DebugLocation(134, 0);
		try
		{
			// CSS.g3:135:5: ( LBRACKET IDENT ( ( OPEQ | INCLUDES | DASHMATCH ) ( IDENT | STRING ) )? RBRACKET )
			DebugEnterAlt(1);
			// CSS.g3:135:7: LBRACKET IDENT ( ( OPEQ | INCLUDES | DASHMATCH ) ( IDENT | STRING ) )? RBRACKET
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(135, 7);
			LBRACKET65=(CommonToken)Match(input,LBRACKET,Follow._LBRACKET_in_attrib851); if (state.failed) return retval;
			if (state.backtracking == 0) {
			LBRACKET65_tree = (CommonTree)adaptor.Create(LBRACKET65);
			adaptor.AddChild(root_0, LBRACKET65_tree);
			}
			DebugLocation(137, 9);
			IDENT66=(CommonToken)Match(input,IDENT,Follow._IDENT_in_attrib866); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT66_tree = (CommonTree)adaptor.Create(IDENT66);
			adaptor.AddChild(root_0, IDENT66_tree);
			}
			DebugLocation(139, 13);
			// CSS.g3:139:13: ( ( OPEQ | INCLUDES | DASHMATCH ) ( IDENT | STRING ) )?
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==DASHMATCH||LA19_0==INCLUDES||LA19_0==OPEQ))
			{
				alt19 = 1;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// CSS.g3:140:17: ( OPEQ | INCLUDES | DASHMATCH ) ( IDENT | STRING )
				{
				DebugLocation(140, 17);
				set67=(CommonToken)input.LT(1);
				if (input.LA(1)==DASHMATCH||input.LA(1)==INCLUDES||input.LA(1)==OPEQ)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set67));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(145, 17);
				set68=(CommonToken)input.LT(1);
				if (input.LA(1)==IDENT||input.LA(1)==STRING)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set68));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;

			}
			} finally { DebugExitSubRule(19); }

			DebugLocation(151, 7);
			RBRACKET69=(CommonToken)Match(input,RBRACKET,Follow._RBRACKET_in_attrib1116); if (state.failed) return retval;
			if (state.backtracking == 0) {
			RBRACKET69_tree = (CommonTree)adaptor.Create(RBRACKET69);
			adaptor.AddChild(root_0, RBRACKET69_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attrib", 21);
			LeaveRule("attrib", 21);
			LeaveRule_attrib();
		}
		DebugLocation(152, 0);
		} finally { DebugExitRule(GrammarFileName, "attrib"); }
		return retval;

	}
	// $ANTLR end "attrib"

	private sealed partial class pseudo_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public pseudo_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_pseudo();
	partial void LeaveRule_pseudo();

	// $ANTLR start "pseudo"
	// CSS.g3:154:1: pseudo : COLON IDENT ( LPAREN ( IDENT )? RPAREN )? ;
	[GrammarRule("pseudo")]
	private CSSParser.pseudo_return pseudo()
	{
		EnterRule_pseudo();
		EnterRule("pseudo", 22);
		TraceIn("pseudo", 22);
		CSSParser.pseudo_return retval = new CSSParser.pseudo_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COLON70 = default(CommonToken);
		CommonToken IDENT71 = default(CommonToken);
		CommonToken LPAREN72 = default(CommonToken);
		CommonToken IDENT73 = default(CommonToken);
		CommonToken RPAREN74 = default(CommonToken);

		CommonTree COLON70_tree = default(CommonTree);
		CommonTree IDENT71_tree = default(CommonTree);
		CommonTree LPAREN72_tree = default(CommonTree);
		CommonTree IDENT73_tree = default(CommonTree);
		CommonTree RPAREN74_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "pseudo");
		DebugLocation(154, 4);
		try
		{
			// CSS.g3:155:5: ( COLON IDENT ( LPAREN ( IDENT )? RPAREN )? )
			DebugEnterAlt(1);
			// CSS.g3:155:7: COLON IDENT ( LPAREN ( IDENT )? RPAREN )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(155, 7);
			COLON70=(CommonToken)Match(input,COLON,Follow._COLON_in_pseudo1129); if (state.failed) return retval;
			if (state.backtracking == 0) {
			COLON70_tree = (CommonTree)adaptor.Create(COLON70);
			adaptor.AddChild(root_0, COLON70_tree);
			}
			DebugLocation(156, 13);
			IDENT71=(CommonToken)Match(input,IDENT,Follow._IDENT_in_pseudo1144); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT71_tree = (CommonTree)adaptor.Create(IDENT71);
			adaptor.AddChild(root_0, IDENT71_tree);
			}
			DebugLocation(157, 17);
			// CSS.g3:157:17: ( LPAREN ( IDENT )? RPAREN )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==LPAREN))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// CSS.g3:159:21: LPAREN ( IDENT )? RPAREN
				{
				DebugLocation(159, 21);
				LPAREN72=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_pseudo1202); if (state.failed) return retval;
				if (state.backtracking == 0) {
				LPAREN72_tree = (CommonTree)adaptor.Create(LPAREN72);
				adaptor.AddChild(root_0, LPAREN72_tree);
				}
				DebugLocation(159, 28);
				// CSS.g3:159:28: ( IDENT )?
				int alt20=2;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==IDENT))
				{
					alt20 = 1;
				}
				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// CSS.g3:159:28: IDENT
					{
					DebugLocation(159, 28);
					IDENT73=(CommonToken)Match(input,IDENT,Follow._IDENT_in_pseudo1204); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENT73_tree = (CommonTree)adaptor.Create(IDENT73);
					adaptor.AddChild(root_0, IDENT73_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(20); }

				DebugLocation(159, 35);
				RPAREN74=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_pseudo1207); if (state.failed) return retval;
				if (state.backtracking == 0) {
				RPAREN74_tree = (CommonTree)adaptor.Create(RPAREN74);
				adaptor.AddChild(root_0, RPAREN74_tree);
				}

				}
				break;

			}
			} finally { DebugExitSubRule(21); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("pseudo", 22);
			LeaveRule("pseudo", 22);
			LeaveRule_pseudo();
		}
		DebugLocation(161, 4);
		} finally { DebugExitRule(GrammarFileName, "pseudo"); }
		return retval;

	}
	// $ANTLR end "pseudo"

	private sealed partial class declaration_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public declaration_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_declaration();
	partial void LeaveRule_declaration();

	// $ANTLR start "declaration"
	// CSS.g3:163:1: declaration : property COLON expr ( prio )? ;
	[GrammarRule("declaration")]
	private CSSParser.declaration_return declaration()
	{
		EnterRule_declaration();
		EnterRule("declaration", 23);
		TraceIn("declaration", 23);
		CSSParser.declaration_return retval = new CSSParser.declaration_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken COLON76 = default(CommonToken);
		CSSParser.property_return property75 = default(CSSParser.property_return);
		CSSParser.expr_return expr77 = default(CSSParser.expr_return);
		CSSParser.prio_return prio78 = default(CSSParser.prio_return);

		CommonTree COLON76_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "declaration");
		DebugLocation(163, 4);
		try
		{
			// CSS.g3:164:5: ( property COLON expr ( prio )? )
			DebugEnterAlt(1);
			// CSS.g3:164:7: property COLON expr ( prio )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(164, 7);
			PushFollow(Follow._property_in_declaration1243);
			property75=property();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, property75.Tree);
			DebugLocation(164, 16);
			COLON76=(CommonToken)Match(input,COLON,Follow._COLON_in_declaration1245); if (state.failed) return retval;
			if (state.backtracking == 0) {
			COLON76_tree = (CommonTree)adaptor.Create(COLON76);
			adaptor.AddChild(root_0, COLON76_tree);
			}
			DebugLocation(164, 22);
			PushFollow(Follow._expr_in_declaration1247);
			expr77=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expr77.Tree);
			DebugLocation(164, 27);
			// CSS.g3:164:27: ( prio )?
			int alt22=2;
			try { DebugEnterSubRule(22);
			try { DebugEnterDecision(22, false);
			int LA22_0 = input.LA(1);

			if ((LA22_0==IMPORTANT_SYM))
			{
				alt22 = 1;
			}
			} finally { DebugExitDecision(22); }
			switch (alt22)
			{
			case 1:
				DebugEnterAlt(1);
				// CSS.g3:164:27: prio
				{
				DebugLocation(164, 27);
				PushFollow(Follow._prio_in_declaration1249);
				prio78=prio();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, prio78.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(22); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("declaration", 23);
			LeaveRule("declaration", 23);
			LeaveRule_declaration();
		}
		DebugLocation(165, 4);
		} finally { DebugExitRule(GrammarFileName, "declaration"); }
		return retval;

	}
	// $ANTLR end "declaration"

	private sealed partial class prio_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public prio_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_prio();
	partial void LeaveRule_prio();

	// $ANTLR start "prio"
	// CSS.g3:167:1: prio : IMPORTANT_SYM ;
	[GrammarRule("prio")]
	private CSSParser.prio_return prio()
	{
		EnterRule_prio();
		EnterRule("prio", 24);
		TraceIn("prio", 24);
		CSSParser.prio_return retval = new CSSParser.prio_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken IMPORTANT_SYM79 = default(CommonToken);

		CommonTree IMPORTANT_SYM79_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "prio");
		DebugLocation(167, 4);
		try
		{
			// CSS.g3:168:5: ( IMPORTANT_SYM )
			DebugEnterAlt(1);
			// CSS.g3:168:7: IMPORTANT_SYM
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(168, 7);
			IMPORTANT_SYM79=(CommonToken)Match(input,IMPORTANT_SYM,Follow._IMPORTANT_SYM_in_prio1271); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IMPORTANT_SYM79_tree = (CommonTree)adaptor.Create(IMPORTANT_SYM79);
			adaptor.AddChild(root_0, IMPORTANT_SYM79_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prio", 24);
			LeaveRule("prio", 24);
			LeaveRule_prio();
		}
		DebugLocation(169, 4);
		} finally { DebugExitRule(GrammarFileName, "prio"); }
		return retval;

	}
	// $ANTLR end "prio"

	private sealed partial class expr_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public expr_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// CSS.g3:171:1: expr : term ( operator term )* ;
	[GrammarRule("expr")]
	private CSSParser.expr_return expr()
	{
		EnterRule_expr();
		EnterRule("expr", 25);
		TraceIn("expr", 25);
		CSSParser.expr_return retval = new CSSParser.expr_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CSSParser.term_return term80 = default(CSSParser.term_return);
		CSSParser.operator_return operator81 = default(CSSParser.operator_return);
		CSSParser.term_return term82 = default(CSSParser.term_return);


		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(171, 4);
		try
		{
			// CSS.g3:172:5: ( term ( operator term )* )
			DebugEnterAlt(1);
			// CSS.g3:172:7: term ( operator term )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(172, 7);
			PushFollow(Follow._term_in_expr1292);
			term80=term();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, term80.Tree);
			DebugLocation(172, 12);
			// CSS.g3:172:12: ( operator term )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==ANGLE||LA23_0==COMMA||LA23_0==EMS||LA23_0==EXS||LA23_0==FREQ||LA23_0==HASH||LA23_0==IDENT||LA23_0==LENGTH||LA23_0==MINUS||LA23_0==NUMBER||(LA23_0>=PERCENTAGE && LA23_0<=PLUS)||LA23_0==SOLIDUS||LA23_0==STRING||LA23_0==TIME||LA23_0==URI))
				{
					alt23 = 1;
				}


				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// CSS.g3:172:13: operator term
					{
					DebugLocation(172, 13);
					PushFollow(Follow._operator_in_expr1295);
					operator81=@operator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, operator81.Tree);
					DebugLocation(172, 22);
					PushFollow(Follow._term_in_expr1297);
					term82=term();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, term82.Tree);

					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }


			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 25);
			LeaveRule("expr", 25);
			LeaveRule_expr();
		}
		DebugLocation(173, 4);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	private sealed partial class term_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public term_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_term();
	partial void LeaveRule_term();

	// $ANTLR start "term"
	// CSS.g3:175:1: term : ( ( unaryOperator )? ( NUMBER | PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ ) | STRING | IDENT ( LPAREN expr RPAREN )? | URI | hexColor );
	[GrammarRule("term")]
	private CSSParser.term_return term()
	{
		EnterRule_term();
		EnterRule("term", 26);
		TraceIn("term", 26);
		CSSParser.term_return retval = new CSSParser.term_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken set84 = default(CommonToken);
		CommonToken STRING85 = default(CommonToken);
		CommonToken IDENT86 = default(CommonToken);
		CommonToken LPAREN87 = default(CommonToken);
		CommonToken RPAREN89 = default(CommonToken);
		CommonToken URI90 = default(CommonToken);
		CSSParser.unaryOperator_return unaryOperator83 = default(CSSParser.unaryOperator_return);
		CSSParser.expr_return expr88 = default(CSSParser.expr_return);
		CSSParser.hexColor_return hexColor91 = default(CSSParser.hexColor_return);

		CommonTree set84_tree = default(CommonTree);
		CommonTree STRING85_tree = default(CommonTree);
		CommonTree IDENT86_tree = default(CommonTree);
		CommonTree LPAREN87_tree = default(CommonTree);
		CommonTree RPAREN89_tree = default(CommonTree);
		CommonTree URI90_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "term");
		DebugLocation(175, 4);
		try
		{
			// CSS.g3:176:5: ( ( unaryOperator )? ( NUMBER | PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ ) | STRING | IDENT ( LPAREN expr RPAREN )? | URI | hexColor )
			int alt26=5;
			try { DebugEnterDecision(26, false);
			switch (input.LA(1))
			{
			case ANGLE:
			case EMS:
			case EXS:
			case FREQ:
			case LENGTH:
			case MINUS:
			case NUMBER:
			case PERCENTAGE:
			case PLUS:
			case TIME:
				{
				alt26 = 1;
				}
				break;
			case STRING:
				{
				alt26 = 2;
				}
				break;
			case IDENT:
				{
				alt26 = 3;
				}
				break;
			case URI:
				{
				alt26 = 4;
				}
				break;
			case HASH:
				{
				alt26 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 26, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// CSS.g3:176:7: ( unaryOperator )? ( NUMBER | PERCENTAGE | LENGTH | EMS | EXS | ANGLE | TIME | FREQ )
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(176, 7);
				// CSS.g3:176:7: ( unaryOperator )?
				int alt24=2;
				try { DebugEnterSubRule(24);
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==MINUS||LA24_0==PLUS))
				{
					alt24 = 1;
				}
				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// CSS.g3:176:7: unaryOperator
					{
					DebugLocation(176, 7);
					PushFollow(Follow._unaryOperator_in_term1320);
					unaryOperator83=unaryOperator();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, unaryOperator83.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(24); }

				DebugLocation(177, 9);
				set84=(CommonToken)input.LT(1);
				if (input.LA(1)==ANGLE||input.LA(1)==EMS||input.LA(1)==EXS||input.LA(1)==FREQ||input.LA(1)==LENGTH||input.LA(1)==NUMBER||input.LA(1)==PERCENTAGE||input.LA(1)==TIME)
				{
					input.Consume();
					if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set84));
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// CSS.g3:187:7: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(187, 7);
				STRING85=(CommonToken)Match(input,STRING,Follow._STRING_in_term1477); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING85_tree = (CommonTree)adaptor.Create(STRING85);
				adaptor.AddChild(root_0, STRING85_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// CSS.g3:188:7: IDENT ( LPAREN expr RPAREN )?
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(188, 7);
				IDENT86=(CommonToken)Match(input,IDENT,Follow._IDENT_in_term1485); if (state.failed) return retval;
				if (state.backtracking == 0) {
				IDENT86_tree = (CommonTree)adaptor.Create(IDENT86);
				adaptor.AddChild(root_0, IDENT86_tree);
				}
				DebugLocation(188, 13);
				// CSS.g3:188:13: ( LPAREN expr RPAREN )?
				int alt25=2;
				try { DebugEnterSubRule(25);
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==LPAREN))
				{
					alt25 = 1;
				}
				} finally { DebugExitDecision(25); }
				switch (alt25)
				{
				case 1:
					DebugEnterAlt(1);
					// CSS.g3:189:17: LPAREN expr RPAREN
					{
					DebugLocation(189, 17);
					LPAREN87=(CommonToken)Match(input,LPAREN,Follow._LPAREN_in_term1508); if (state.failed) return retval;
					if (state.backtracking == 0) {
					LPAREN87_tree = (CommonTree)adaptor.Create(LPAREN87);
					adaptor.AddChild(root_0, LPAREN87_tree);
					}
					DebugLocation(189, 24);
					PushFollow(Follow._expr_in_term1510);
					expr88=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expr88.Tree);
					DebugLocation(189, 29);
					RPAREN89=(CommonToken)Match(input,RPAREN,Follow._RPAREN_in_term1512); if (state.failed) return retval;
					if (state.backtracking == 0) {
					RPAREN89_tree = (CommonTree)adaptor.Create(RPAREN89);
					adaptor.AddChild(root_0, RPAREN89_tree);
					}

					}
					break;

				}
				} finally { DebugExitSubRule(25); }


				}
				break;
			case 4:
				DebugEnterAlt(4);
				// CSS.g3:191:7: URI
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(191, 7);
				URI90=(CommonToken)Match(input,URI,Follow._URI_in_term1535); if (state.failed) return retval;
				if (state.backtracking == 0) {
				URI90_tree = (CommonTree)adaptor.Create(URI90);
				adaptor.AddChild(root_0, URI90_tree);
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// CSS.g3:192:7: hexColor
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(192, 7);
				PushFollow(Follow._hexColor_in_term1543);
				hexColor91=hexColor();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, hexColor91.Tree);

				}
				break;

			}
			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("term", 26);
			LeaveRule("term", 26);
			LeaveRule_term();
		}
		DebugLocation(193, 4);
		} finally { DebugExitRule(GrammarFileName, "term"); }
		return retval;

	}
	// $ANTLR end "term"

	private sealed partial class hexColor_return : ParserRuleReturnScope<CommonToken>, IAstRuleReturnScope<CommonTree>, IAstRuleReturnScope
	{
		private CommonTree _tree;
		public CommonTree Tree { get { return _tree; } set { _tree = value; } }
		object IAstRuleReturnScope.Tree { get { return Tree; } }
		public hexColor_return(CSSParser grammar) {OnCreated(grammar);}
		partial void OnCreated(CSSParser grammar);
	}

	partial void EnterRule_hexColor();
	partial void LeaveRule_hexColor();

	// $ANTLR start "hexColor"
	// CSS.g3:195:1: hexColor : HASH ;
	[GrammarRule("hexColor")]
	private CSSParser.hexColor_return hexColor()
	{
		EnterRule_hexColor();
		EnterRule("hexColor", 27);
		TraceIn("hexColor", 27);
		CSSParser.hexColor_return retval = new CSSParser.hexColor_return(this);
		retval.Start = (CommonToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		CommonToken HASH92 = default(CommonToken);

		CommonTree HASH92_tree = default(CommonTree);

		try { DebugEnterRule(GrammarFileName, "hexColor");
		DebugLocation(195, 4);
		try
		{
			// CSS.g3:196:5: ( HASH )
			DebugEnterAlt(1);
			// CSS.g3:196:7: HASH
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(196, 7);
			HASH92=(CommonToken)Match(input,HASH,Follow._HASH_in_hexColor1564); if (state.failed) return retval;
			if (state.backtracking == 0) {
			HASH92_tree = (CommonTree)adaptor.Create(HASH92);
			adaptor.AddChild(root_0, HASH92_tree);
			}

			}

			retval.Stop = (CommonToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("hexColor", 27);
			LeaveRule("hexColor", 27);
			LeaveRule_hexColor();
		}
		DebugLocation(197, 4);
		} finally { DebugExitRule(GrammarFileName, "hexColor"); }
		return retval;

	}
	// $ANTLR end "hexColor"

	partial void EnterRule_synpred1_CSS_fragment();
	partial void LeaveRule_synpred1_CSS_fragment();

	// $ANTLR start synpred1_CSS
	public void synpred1_CSS_fragment()
	{
		EnterRule_synpred1_CSS_fragment();
		EnterRule("synpred1_CSS_fragment", 28);
		TraceIn("synpred1_CSS_fragment", 28);
		try
		{
			// CSS.g3:109:10: ( esPred )
			DebugEnterAlt(1);
			// CSS.g3:109:11: esPred
			{
			DebugLocation(109, 11);
			PushFollow(Follow._esPred_in_synpred1_CSS671);
			esPred();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred1_CSS_fragment", 28);
			LeaveRule("synpred1_CSS_fragment", 28);
			LeaveRule_synpred1_CSS_fragment();
		}
	}
	// $ANTLR end synpred1_CSS

	partial void EnterRule_synpred2_CSS_fragment();
	partial void LeaveRule_synpred2_CSS_fragment();

	// $ANTLR start synpred2_CSS
	public void synpred2_CSS_fragment()
	{
		EnterRule_synpred2_CSS_fragment();
		EnterRule("synpred2_CSS_fragment", 29);
		TraceIn("synpred2_CSS_fragment", 29);
		try
		{
			// CSS.g3:111:8: ( esPred )
			DebugEnterAlt(1);
			// CSS.g3:111:9: esPred
			{
			DebugLocation(111, 9);
			PushFollow(Follow._esPred_in_synpred2_CSS695);
			esPred();
			PopFollow();
			if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred2_CSS_fragment", 29);
			LeaveRule("synpred2_CSS_fragment", 29);
			LeaveRule_synpred2_CSS_fragment();
		}
	}
	// $ANTLR end synpred2_CSS
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA15 dfa15;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa15 = new DFA15( this, SpecialStateTransition15 );
	}

	private class DFA15 : DFA
	{
		private const string DFA15_eotS =
			"\xD\xFFFF";
		private const string DFA15_eofS =
			"\xD\xFFFF";
		private const string DFA15_minS =
			"\x1\xB\x1\xFFFF\x1\x0\x3\x1E\x1\xFFFF\x1\x0\x1\xF\x1\x0\x1\x1E\x1\x0"+
			"\x1\x3D";
		private const string DFA15_maxS =
			"\x1\x42\x1\xFFFF\x1\x0\x3\x1E\x1\xFFFF\x1\x0\x1\x3D\x1\x0\x1\x43\x1\x0"+
			"\x1\x3D";
		private const string DFA15_acceptS =
			"\x1\xFFFF\x1\x2\x4\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA15_specialS =
			"\x2\xFFFF\x1\x0\x4\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x1\x3\x1\xFFFF}>";
		private static readonly string[] DFA15_transitionS =
			{
				"\x1\x5\x1\x1\x4\xFFFF\x1\x3\x7\xFFFF\x1\x1\x1\xFFFF\x1\x2\x2\xFFFF\x1"+
				"\x1\x7\xFFFF\x1\x1\x1\x4\x11\xFFFF\x1\x1\x8\xFFFF\x1\x1",
				"",
				"\x1\xFFFF",
				"\x1\x7",
				"\x1\x8",
				"\x1\x9",
				"",
				"\x1\xFFFF",
				"\x1\xA\x11\xFFFF\x1\xA\x13\xFFFF\x1\xA\x7\xFFFF\x1\xB",
				"\x1\xFFFF",
				"\x1\xC\x24\xFFFF\x1\xC",
				"\x1\xFFFF",
				"\x1\xB"
			};

		private static readonly short[] DFA15_eot = DFA.UnpackEncodedString(DFA15_eotS);
		private static readonly short[] DFA15_eof = DFA.UnpackEncodedString(DFA15_eofS);
		private static readonly char[] DFA15_min = DFA.UnpackEncodedStringToUnsignedChars(DFA15_minS);
		private static readonly char[] DFA15_max = DFA.UnpackEncodedStringToUnsignedChars(DFA15_maxS);
		private static readonly short[] DFA15_accept = DFA.UnpackEncodedString(DFA15_acceptS);
		private static readonly short[] DFA15_special = DFA.UnpackEncodedString(DFA15_specialS);
		private static readonly short[][] DFA15_transition;

		static DFA15()
		{
			int numStates = DFA15_transitionS.Length;
			DFA15_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA15_transition[i] = DFA.UnpackEncodedString(DFA15_transitionS[i]);
			}
		}

		public DFA15( BaseRecognizer recognizer, SpecialStateTransitionHandler specialStateTransition )
			: base(specialStateTransition)
		{
			this.recognizer = recognizer;
			this.decisionNumber = 15;
			this.eot = DFA15_eot;
			this.eof = DFA15_eof;
			this.min = DFA15_min;
			this.max = DFA15_max;
			this.accept = DFA15_accept;
			this.special = DFA15_special;
			this.transition = DFA15_transition;
		}

		public override string Description { get { return "()* loopback of 109:9: ( ( esPred )=> elementSubsequent )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private int SpecialStateTransition15(DFA dfa, int s, IIntStream _input)
	{
		ITokenStream input = (ITokenStream)_input;
		int _s = s;
		switch (s)
		{
			case 0:
				int LA15_2 = input.LA(1);


				int index15_2 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS_fragment))) {s = 6;}

				else if ((true)) {s = 1;}


				input.Seek(index15_2);
				if (s >= 0) return s;
				break;
			case 1:
				int LA15_7 = input.LA(1);


				int index15_7 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS_fragment))) {s = 6;}

				else if ((true)) {s = 1;}


				input.Seek(index15_7);
				if (s >= 0) return s;
				break;
			case 2:
				int LA15_9 = input.LA(1);


				int index15_9 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS_fragment))) {s = 6;}

				else if ((true)) {s = 1;}


				input.Seek(index15_9);
				if (s >= 0) return s;
				break;
			case 3:
				int LA15_11 = input.LA(1);


				int index15_11 = input.Index;
				input.Rewind();
				s = -1;
				if ((EvaluatePredicate(synpred1_CSS_fragment))) {s = 6;}

				else if ((true)) {s = 1;}


				input.Seek(index15_11);
				if (s >= 0) return s;
				break;
		}
		if (state.backtracking > 0) {state.failed=true; return -1;}
		NoViableAltException nvae = new NoViableAltException(dfa.Description, 15, _s, input);
		dfa.Error(nvae);
		throw nvae;
	}

	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _charSet_in_styleSheet76 = new BitSet(new ulong[]{0x80088148020800UL,0x4UL});
		public static readonly BitSet _imports_in_styleSheet86 = new BitSet(new ulong[]{0x80088148020800UL,0x4UL});
		public static readonly BitSet _bodylist_in_styleSheet97 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_styleSheet104 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _CHARSET_SYM_in_charSet130 = new BitSet(new ulong[]{0x0UL,0x8UL});
		public static readonly BitSet _STRING_in_charSet132 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _SEMI_in_charSet134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORT_SYM_in_imports162 = new BitSet(new ulong[]{0x0UL,0x108UL});
		public static readonly BitSet _set_in_imports164 = new BitSet(new ulong[]{0x40000000UL,0x1UL});
		public static readonly BitSet _medium_in_imports171 = new BitSet(new ulong[]{0x1000UL,0x1UL});
		public static readonly BitSet _COMMA_in_imports174 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _medium_in_imports176 = new BitSet(new ulong[]{0x1000UL,0x1UL});
		public static readonly BitSet _SEMI_in_imports182 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _MEDIA_SYM_in_media203 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _medium_in_media205 = new BitSet(new ulong[]{0x4000001000UL});
		public static readonly BitSet _COMMA_in_media208 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _medium_in_media210 = new BitSet(new ulong[]{0x4000001000UL});
		public static readonly BitSet _LBRACE_in_media222 = new BitSet(new ulong[]{0x8048020800UL,0x4UL});
		public static readonly BitSet _ruleSet_in_media236 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _RBRACE_in_media246 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_medium266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _bodyset_in_bodylist289 = new BitSet(new ulong[]{0x80088048020802UL,0x4UL});
		public static readonly BitSet _ruleSet_in_bodyset311 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _media_in_bodyset319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _page_in_bodyset327 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PAGE_SYM_in_page351 = new BitSet(new ulong[]{0x4000000800UL});
		public static readonly BitSet _pseudoPage_in_page353 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _LBRACE_in_page364 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _declaration_in_page378 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _SEMI_in_page380 = new BitSet(new ulong[]{0x1000000040000000UL});
		public static readonly BitSet _declaration_in_page383 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _SEMI_in_page385 = new BitSet(new ulong[]{0x1000000040000000UL});
		public static readonly BitSet _RBRACE_in_page397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLON_in_pseudoPage418 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _IDENT_in_pseudoPage420 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _SOLIDUS_in_operator441 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COMMA_in_operator449 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _PLUS_in_combinator476 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _GREATER_in_combinator484 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_unaryOperator509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_property542 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _selector_in_ruleSet563 = new BitSet(new ulong[]{0x4000001000UL});
		public static readonly BitSet _COMMA_in_ruleSet566 = new BitSet(new ulong[]{0x8048020800UL,0x4UL});
		public static readonly BitSet _selector_in_ruleSet568 = new BitSet(new ulong[]{0x4000001000UL});
		public static readonly BitSet _LBRACE_in_ruleSet580 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _declaration_in_ruleSet594 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _SEMI_in_ruleSet596 = new BitSet(new ulong[]{0x1000000040000000UL});
		public static readonly BitSet _declaration_in_ruleSet599 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _SEMI_in_ruleSet601 = new BitSet(new ulong[]{0x1000000040000000UL});
		public static readonly BitSet _RBRACE_in_ruleSet613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _simpleSelector_in_selector634 = new BitSet(new ulong[]{0x20000804A020802UL,0x4UL});
		public static readonly BitSet _combinator_in_selector637 = new BitSet(new ulong[]{0x8048020800UL,0x4UL});
		public static readonly BitSet _simpleSelector_in_selector639 = new BitSet(new ulong[]{0x20000804A020802UL,0x4UL});
		public static readonly BitSet _elementName_in_simpleSelector658 = new BitSet(new ulong[]{0x8048020802UL,0x4UL});
		public static readonly BitSet _elementSubsequent_in_simpleSelector674 = new BitSet(new ulong[]{0x8048020802UL,0x4UL});
		public static readonly BitSet _elementSubsequent_in_simpleSelector698 = new BitSet(new ulong[]{0x8048020802UL,0x4UL});
		public static readonly BitSet _set_in_esPred719 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HASH_in_elementSubsequent754 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cssClass_in_elementSubsequent762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attrib_in_elementSubsequent770 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _pseudo_in_elementSubsequent778 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DOT_in_cssClass799 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _IDENT_in_cssClass801 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _set_in_elementName820 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _LBRACKET_in_attrib851 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _IDENT_in_attrib866 = new BitSet(new ulong[]{0x2020000200008000UL});
		public static readonly BitSet _set_in_attrib907 = new BitSet(new ulong[]{0x40000000UL,0x8UL});
		public static readonly BitSet _set_in_attrib1015 = new BitSet(new ulong[]{0x2000000000000000UL});
		public static readonly BitSet _RBRACKET_in_attrib1116 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _COLON_in_pseudo1129 = new BitSet(new ulong[]{0x40000000UL});
		public static readonly BitSet _IDENT_in_pseudo1144 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _LPAREN_in_pseudo1202 = new BitSet(new ulong[]{0x4000000040000000UL});
		public static readonly BitSet _IDENT_in_pseudo1204 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _RPAREN_in_pseudo1207 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _property_in_declaration1243 = new BitSet(new ulong[]{0x800UL});
		public static readonly BitSet _COLON_in_declaration1245 = new BitSet(new ulong[]{0x308110048A80020UL,0x128UL});
		public static readonly BitSet _expr_in_declaration1247 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _prio_in_declaration1249 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IMPORTANT_SYM_in_prio1271 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _term_in_expr1292 = new BitSet(new ulong[]{0x308110048A81022UL,0x12AUL});
		public static readonly BitSet _operator_in_expr1295 = new BitSet(new ulong[]{0x308110048A80020UL,0x128UL});
		public static readonly BitSet _term_in_expr1297 = new BitSet(new ulong[]{0x308110048A81022UL,0x12AUL});
		public static readonly BitSet _unaryOperator_in_term1320 = new BitSet(new ulong[]{0x108010000A80020UL,0x20UL});
		public static readonly BitSet _set_in_term1331 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_term1477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_term1485 = new BitSet(new ulong[]{0x20000000002UL});
		public static readonly BitSet _LPAREN_in_term1508 = new BitSet(new ulong[]{0x308110048A80020UL,0x128UL});
		public static readonly BitSet _expr_in_term1510 = new BitSet(new ulong[]{0x4000000000000000UL});
		public static readonly BitSet _RPAREN_in_term1512 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _URI_in_term1535 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _hexColor_in_term1543 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _HASH_in_hexColor1564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _esPred_in_synpred1_CSS671 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _esPred_in_synpred2_CSS695 = new BitSet(new ulong[]{0x2UL});

	}
	#endregion Follow sets
}

} // namespace CssParser
